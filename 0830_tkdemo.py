import os
os.environ['CUDA_VISIBLE_DEVICES'] = '3'
import argparse
import numpy as np
import pickle
import errno
import tkinter as tk
import os.path as osp

from tkinter import messagebox
from tkinter.filedialog import *
import tkinter.font as tkFont
from deepfake_celebv_0828 import Lmark_DeepFake
from easydict import EasyDict as edict
import yaml
# import PIL

from PIL import Image as Pil_image, ImageTk as Pil_imageTk



mean_face_98_828 = np.array([[156, 219], [194, 192], [241, 181], [286, 186], [329, 196], [328, 218], [288, 220], [241, 211], [194, 220], [498, 196], [541, 186], [587, 181], [635, 192], [671, 220], [631, 218], [587, 211], [541, 216], [497,222], [414, 282], [414, 333], [414, 384], [414, 437], [360, 477], [383,  483], [414, 487], [444, 483], [469, 477], [220, 284], [241, 271], [270, 263], [295, 269], [336, 288], [301, 300], [276, 303], [242, 302], [495,  290], [533, 269], [558, 263], [586, 271], [607, 284], [586, 300], [553, 303], [528, 298], [299, 589], [339, 560], [388, 542], [414, 547], [438, 542], [488, 561], [528, 589], [485, 607], [452, 618], [414, 621], [377, 618], [344, 606], [311, 584], [379, 572], [414, 572], [449, 572], [519, 586], [447, 586], [414, 585], [380, 585], [270, 283], [558, 283],     [84, 318], [93, 360], [92, 405], [101, 450], [107, 487], [113, 524], [123, 560], [134, 598], [148, 638], [168, 672], [194, 701], [218, 720], [247, 739], [279, 754], [313, 772], [351, 785], [413, 790], [476, 785], [513, 773], [550, 755], [581, 740], [611, 720], [635, 701], [659, 672], [679, 640], [695, 598], [704, 562], [715, 524], [722, 488], [727, 450], [736, 407], [737, 360], [744, 318]], dtype=float)

mean_face_x = mean_face_98_828[:, 0]
mean_face_y = mean_face_98_828[:, 1]
mean_face_x /= 824.0
mean_face_y -= 25.0
mean_face_y /= 824.0
meanface_98_1 = np.zeros(mean_face_98_828.shape)
meanface_98_1[:, 0] = mean_face_x
meanface_98_1[:, 1] = mean_face_y


mean_face_mac = np.array([[0.28878352, 0.35951936],
  [0.32182494, 0.30960384],
  [0.35758162, 0.3005841 ],
  [0.39666963, 0.3036368 ],
  [0.43369907, 0.31702176],
  [0.4362918,  0.34167555],
  [0.39961874, 0.3335622 ],
  [0.3630074,  0.32970497],
  [0.32330993, 0.33646703],
  [0.5258782,  0.30909744],
  [0.56574833, 0.29493836],
  [0.60547346, 0.2863355 ],
  [0.65087,    0.29105973],
  [0.6850114,  0.32411104],
  [0.6506063,  0.31868365],
  [0.607139,   0.3171449 ],
  [0.5679678,  0.32351014],
  [0.52621603, 0.3331687 ],
  [0.4793318,  0.37074107],
  [0.48086795, 0.4135431 ],
  [0.47904,    0.45683357],
  [0.476241,   0.49889627],
  [0.44378293, 0.53327316],
  [0.46466398, 0.5387126 ],
  [0.48887238, 0.5415492 ],
  [0.51356727, 0.5387582 ],
  [0.53918725, 0.5306862 ],
  [0.33701557, 0.38394475],
  [0.35495797, 0.36837384],
  [0.3782896, 0.36091784],
  [0.4054746,  0.36226335],
  [0.42976442, 0.37838712],
  [0.4066825,  0.38949117],
  [0.37973145, 0.39624566],
  [0.35698006, 0.39338723],
  [0.55104655, 0.37531197],
  [0.5742123,  0.35375816],
  [0.60110766, 0.34741274],
  [0.6286713,  0.3532096 ],
  [0.65221006, 0.3688683 ],
  [0.6303903,  0.38247922],
  [0.6042985,  0.38728493],
  [0.5766415,  0.3852963 ],
  [0.4029456,  0.625019  ],
  [0.43911698, 0.6087787 ],
  [0.47284296, 0.6008344 ],
  [0.4918106,  0.60225725],
  [0.509192,   0.6005706 ],
  [0.5556207,  0.60706663],
  [0.5995564,  0.6179389 ],
  [0.57063204, 0.6428207 ],
  [0.5369164,  0.6652723 ],
  [0.49766567, 0.675033  ],
  [0.46116304, 0.67193645],
  [0.42932385, 0.65049386],
  [0.4126345,  0.6256647 ],
  [0.4523974,  0.6195166 ],
  [0.49072883, 0.6198407 ],
  [0.5433686,  0.6182333 ],
  [0.59127724, 0.6190672 ],
  [0.5457146,  0.62662435],
  [0.49419245, 0.6328308 ],
  [0.45215738, 0.6321716 ],
  [0.38125774, 0.3774149 ],
  [0.6033655,  0.36745074],
  [0.2621507,  0.3906519 ],
  [0.2674854,  0.42950413],
  [0.2716949,  0.46218523],
  [0.27659914, 0.4938288 ],
  [0.28335723, 0.52676195],
  [0.28744,    0.5573533 ],
  [0.2915034,  0.5888813 ],
  [0.29715768, 0.6194488 ],
  [0.30636537, 0.65106   ],
  [0.31921268, 0.6799789 ],
  [0.3354921,  0.7080238 ],
  [0.35838136, 0.736559  ],
  [0.38532466, 0.76126087],
  [0.41717294, 0.7824456 ],
  [0.44906694, 0.79717225],
  [0.48096263, 0.8031682 ],
  [0.51325446, 0.80432147],
  [0.5482683,  0.7987548 ],
  [0.58306795, 0.7875294 ],
  [0.6173726,  0.77242583],
  [0.64669925, 0.7573333 ],
  [0.67615634, 0.7344884 ],
  [0.70263106, 0.7134111 ],
  [0.7271998,  0.68835914],
  [0.7479217,  0.66105   ],
  [0.76622367, 0.6286631 ],
  [0.7764417,  0.5940363 ],
  [0.7822461,  0.55522245],
  [0.7845003,  0.5216908 ],
  [0.7852486,  0.48644546],
  [0.78801537, 0.44804198],
  [0.7900734,  0.41026756],
  [0.79530686, 0.36591613]])



mean_face_mac1 = np.array([[0.29819968, 0.3509782 ],
  [0.33942795, 0.3167827 ],
  [0.38257647, 0.30965766],
  [0.42821348, 0.31467786],
  [0.4721778,  0.32536438],
  [0.47807723, 0.3531582 ],
  [0.43174136, 0.34468147],
  [0.3865279,  0.3422464 ],
  [0.34083754, 0.34439796],
  [0.55962,    0.32823092],
  [0.5905204,  0.31584212],
  [0.62166744, 0.30442584],
  [0.64859945, 0.29720044],
  [0.6822205,  0.31930375],
  [0.65038425, 0.32239032],
  [0.6229413,  0.33031404],
  [0.5938314,  0.3389425 ],
  [0.56097615, 0.35090646],
  [0.5263626,  0.37908602],
  [0.5404933,  0.43282336],
  [0.55053884, 0.48180854],
  [0.56164914, 0.52571386],
  [0.47706264, 0.5393552 ],
  [0.5107845, 0.5466097 ],
  [0.5411024,  0.55700564],
  [0.5632097,  0.55532116],
  [0.5847344,  0.5454579 ],
  [0.34767097, 0.3924169 ],
  [0.37597513, 0.3902688 ],
  [0.4025368,  0.38893956],
  [0.42620885, 0.3839587 ],
  [0.45425126, 0.38272926],
  [0.42819318, 0.395331  ],
  [0.40209585, 0.4015541 ],
  [0.37170666, 0.40174937],
  [0.5667951,  0.379451  ],
  [0.5892681,  0.3708173 ],
  [0.6150173,  0.372523  ],
  [0.6302107,  0.3744126 ],
  [0.645691,   0.37504792],
  [0.63077354, 0.38258633],
  [0.6150397,  0.3867563 ],
  [0.5913653,  0.38640046],
  [0.41760173, 0.6290407 ],
  [0.46605918, 0.6192094 ],
  [0.51686233, 0.61793387],
  [0.5341913,  0.6189518 ],
  [0.5544181,  0.6157312 ],
  [0.5846945,  0.61894387],
  [0.6110699,  0.6270876 ],
  [0.58934855, 0.6501237 ],
  [0.5640748,  0.66466135],
  [0.5346445,  0.67289054],
  [0.49095282, 0.6693777 ],
  [0.45285,    0.65250236],
  [0.42826644, 0.63014346],
  [0.47934046, 0.63302135],
  [0.53253865, 0.63467795],
  [0.5684412,  0.63139844],
  [0.6028038,  0.6292765 ],
  [0.56825,    0.6359825 ],
  [0.53268063, 0.6396422 ],
  [0.47771564, 0.63512206],
  [0.40269932, 0.39694768],
  [0.60792065, 0.38381022],
  [0.1557376,  0.33493742],
  [0.1632438,  0.37815806],
  [0.17064081, 0.42138475],
  [0.1792778,  0.46581098],
  [0.18635751, 0.50744736],
  [0.19201064, 0.54782677],
  [0.20606503, 0.5859108 ],
  [0.22580527, 0.62303853],
  [0.25093794, 0.6583567 ],
  [0.28070548, 0.68763316],
  [0.31020722, 0.7107059 ],
  [0.34422666, 0.7345538 ],
  [0.37930802, 0.75601417],
  [0.41361955, 0.7762356 ],
  [0.45203537, 0.7910544 ],
  [0.49509788, 0.8040708 ],
  [0.5334498,  0.80272555],
  [0.56046045, 0.79265803],
  [0.58630353, 0.7711761 ],
  [0.6052539,  0.7418286 ],
  [0.61995053, 0.716463  ],
  [0.6367626,  0.6862682 ],
  [0.6503975,  0.65743107],
  [0.6616431,  0.6277105 ],
  [0.67198926, 0.59559965],
  [0.67993736, 0.56224453],
  [0.68364394, 0.52884454],
  [0.6860505,  0.4955279 ],
  [0.6856575,  0.46446955],
  [0.68399876, 0.4283934 ],
  [0.68415034, 0.38971764],
  [0.6829822,  0.35753164],
  [0.68572205, 0.32472906]])

mean_face_mac5 =np.array(  [[0.2801615,  0.35102817],
  [0.3244214,  0.3227845 ],
  [0.3696446,  0.31811085],
  [0.4133034,  0.3233641 ],
  [0.4547166,  0.3343687 ],
  [0.4599336,  0.3610527 ],
  [0.41653764, 0.3531816 ],
  [0.37282148, 0.34990045],
  [0.3244877,  0.34981635],
  [0.54929453, 0.33287182],
  [0.5846633,  0.32015604],
  [0.621608,   0.30855605],
  [0.6582974,  0.30689925],
  [0.69573957, 0.3349142 ],
  [0.65834403, 0.33291808],
  [0.6215687,  0.33676583],
  [0.5863773,  0.34612548],
  [0.5504327,  0.35728374],
  [0.50840753, 0.38686392],
  [0.5144684,  0.44241863],
  [0.51967925, 0.4946467 ],
  [0.52561533, 0.54263574],
  [0.4580913,  0.5500377 ],
  [0.48820922, 0.5614553 ],
  [0.5210419,  0.57127583],
  [0.5463275,  0.5613112 ],
  [0.5690556,  0.548608  ],
  [0.33972138, 0.39558834],
  [0.36625105, 0.39461774],
  [0.39067563, 0.39397433],
  [0.41574216, 0.3895075 ],
  [0.4460179,  0.3910851 ],
  [0.4181856,  0.4000144 ],
  [0.39118955, 0.4036794 ],
  [0.3631549,  0.40348178],
  [0.56257886, 0.38647905],
  [0.5849558,  0.3791119 ],
  [0.6106325,  0.38111225],
  [0.62930214, 0.38386658],
  [0.6500198,  0.38569742],
  [0.63092095, 0.39508918],
  [0.61131096, 0.39991477],
  [0.5861034,  0.39682946],
  [0.4049603,  0.62932086],
  [0.4536356,  0.620877  ],
  [0.49962214, 0.6209429 ],
  [0.5181235,  0.6226717 ],
  [0.5360631,  0.61965585],
  [0.570616,   0.6215862 ],
  [0.60702336, 0.62338865],
  [0.5789814,  0.6521298 ],
  [0.5498381,  0.6750527 ],
  [0.512873,   0.6860436 ],
  [0.47260928, 0.6795416 ],
  [0.43630174, 0.6564665 ],
  [0.41453424, 0.63180494],
  [0.46627632, 0.6322802 ],
  [0.515002,   0.6374198 ],
  [0.55798453, 0.63379765],
  [0.59719086, 0.62715715],
  [0.556502,   0.6401877 ],
  [0.51555586, 0.6483831 ],
  [0.46337608, 0.63981193],
  [0.39507854, 0.39839482],
  [0.6058365,  0.3925382 ],
  [0.19176775, 0.30516526],
  [0.19645293, 0.34962457],
  [0.20031993, 0.39105123],
  [0.20830901, 0.43509546],
  [0.21406826, 0.47550917],
  [0.21740407, 0.5161778 ],
  [0.2258161,  0.55384797],
  [0.23859213, 0.59147906],
  [0.25798625, 0.63149166],
  [0.2785271,  0.6677036 ],
  [0.30432126, 0.6944164 ],
  [0.33472863, 0.7188196 ],
  [0.36809197, 0.74307364],
  [0.40138793, 0.7641428 ],
  [0.43601364, 0.7827216 ],
  [0.4768685,  0.79845273],
  [0.51406443, 0.8016243 ],
  [0.5485991,  0.79492646],
  [0.581946,   0.77724326],
  [0.6073245,  0.74983966],
  [0.6306555,  0.72088677],
  [0.65422994, 0.69052726],
  [0.6756738,  0.6626018 ],
  [0.69600874, 0.6302544 ],
  [0.712118,  0.597567  ],
  [0.7215165,  0.5636881 ],
  [0.72633344, 0.52380985],
  [0.7265892,  0.4870788 ],
  [0.72839,    0.4518485 ],
  [0.73018396, 0.4138766 ],
  [0.73188376, 0.37611562],
  [0.7335143,  0.33862123],
  [0.73467886, 0.29629013]])

class TkWindow():
    def __init__(self):
        self.window = tk.Tk()
        self.window.title('Lm2Face')
        self.window.geometry('1200x600')
        self.var = tk.StringVar()
        self.ft = tkFont.Font(size=14, weight=tkFont.BOLD)
        self.ft1 = tkFont.Font(size=11, weight=tkFont.BOLD)

        self.init_pts = mean_face_mac1 * 511.0
        self.dynamic_pts = self.init_pts

        self.show_circles = [0] * 98

        self.init_cfg()

        self.pl_can(300, 260)
        self.pl_pts(self.init_pts)
        self.init_lm2face_model()

    def b1_f(self):
        self.init_pts = mean_face_mac1 * 511.0
        self.pl_pts(self.init_pts)
        self.w_show.delete(ALL)
        self.dynamic_pts = self.init_pts


    def pl_can(self, x0, y0):
        self.w = tk.Canvas(self.window, bg='gray', height=512, width=512)
        self.w.place(x=x0, y=y0, anchor='center')

        self.w_show = tk.Canvas(self.window, bg='white', height=512, width=512)
        self.w_show.place(x=x0+560, y=y0, anchor='center')


        self.b1 = tk.Button(self.window, text='Reset PTs', font=self.ft, command=self.b1_f)
        self.b1.place(x=200, y=520, anchor='nw')
        self.b2 = tk.Button(self.window, text='Move PTs', font=self.ft, command=self.b2_f)
        self.b2.place(x=600, y=520, anchor='n')
        self.b3 = tk.Button(self.window, text='Generate', font=self.ft, command=self.b3_f)
        self.b3.place(x=1000, y=520, anchor='ne')

        self.r1 = tk.Radiobutton(self.window, text='ID0',
                            font=self.ft, variable=self.var, value='a', command=self.l_m0)
        self.r1.place(x=100, y=590, anchor='s')
        self.r2 = tk.Radiobutton(self.window, text='ID1',
                            font=self.ft, variable=self.var, value='b', command=self.l_m1)
        self.r2.place(x=300, y=590, anchor='s')
        self.r3 = tk.Radiobutton(self.window, text='ID2',
                            font=self.ft, variable=self.var, value='c', command=self.l_m2)
        self.r3.place(x=500, y=590, anchor='s')
        self.r4 = tk.Radiobutton(self.window, text='ID3',
                            font=self.ft, variable=self.var, value='d', command=self.l_m3)
        self.r4.place(x=700, y=590, anchor='s')
        self.r5 = tk.Radiobutton(self.window, text='ID4',
                            font=self.ft, variable=self.var, value='e', command=self.l_m4)
        self.r5.place(x=900, y=590, anchor='s')

    def l_m0(self):
        self.idid = 0
    def l_m1(self):
        self.idid = 1
    def l_m2(self):
        self.idid = 2
    def l_m3(self):
        self.idid = 3
    def l_m4(self):
        self.idid = 4


    def run_window(self):
        self.window.mainloop()




    def b2_f(self):
        self.w.bind('<Button-1>', self.min_record)
        self.w.bind('<B1-Motion>', self.paint)
        self.w.bind('<ButtonRelease-1>', self.max_record)



    def b3_f(self):
        self.final_lms = self.dynamic_pts / 511.0
        print(self.final_lms)
        self.generate_face()

        self.imm = Pil_image.fromarray(self.new_face)

        self.img_ac = self.imm.resize((512, 512), Pil_image.ANTIALIAS)
        self.img_ac = Pil_imageTk.PhotoImage(self.img_ac)

        self.w_show.create_image(0, 0, anchor='nw', image=self.img_ac)


    def pl_pts(self, pts):
        self.w.delete(ALL)
        for i in range(len(pts)):
            if i == 96-33 or i == 97-33:
                self.show_circles[i] = self.w.create_oval(int(pts[i][0]-4.0), int(pts[i][1]-4.0), int(pts[i][0]+4.0), int(pts[i][1]+4.0), fill='red')

            else:
                self.show_circles[i] = self.w.create_oval(int(pts[i][0]-4.0), int(pts[i][1]-4.0), int(pts[i][0]+4.0), int(pts[i][1]+4.0))


    def min_record(self, event):
        global pt_index
        self.x_min, self.y_min = event.x, event.y
        pt_index = compute_nearest_index(self.dynamic_pts, np.array([self.x_min, self.y_min]))


    def max_record(self, event):
        global pt_index

        self.x_max, self.y_max = event.x, event.y
        x2, y2 = self.x_max, self.y_max
        self.w.delete(self.show_circles[pt_index])
        if pt_index == 96-33 or pt_index==97-33:
            self.show_circles[pt_index] = self.w.create_oval(int(x2-4.0), int(y2-4.0), int(x2+4.0), int(y2+4.0), fill='red')
        else:
            self.show_circles[pt_index] = self.w.create_oval(int(x2-4.0), int(y2-4.0), int(x2+4.0), int(y2+4.0))
        self.dynamic_pts[pt_index] = np.array([self.x_max, self.y_max])
        print(np.max(self.dynamic_pts - meanface_98_1 * 511.0))
        print(np.min(self.dynamic_pts - meanface_98_1 * 511.0))

    def paint(self, event):
        global pt_index
        x2, y2 = event.x, event.y

        self.w.delete(self.show_circles[pt_index])

        if pt_index == 96-33 or pt_index==97-33:
            self.show_circles[pt_index] = self.w.create_oval(int(x2-4.0), int(y2-4.0), int(x2+4.0), int(y2+4.0), fill='red')
        else:
            self.show_circles[pt_index] = self.w.create_oval(int(x2-4.0), int(y2-4.0), int(x2+4.0), int(y2+4.0))


    def init_lm2face_model(self):
        self.deep_fake = Lmark_DeepFake(size=256, net_cfg=self.net_cfg, is_cuda=True, model_index=-1)

    def generate_face(self):
        new_face_dict = self.deep_fake.GAN_convert(np.array([self.final_lms]), self.idid)
        self.new_face = new_face_dict[str(self.idid)]


    def init_cfg(self):
        net_cfg = edict()
        net_cfg['lm_AE_ckpt_index'] = -1
        net_cfg['decoder_ckpt_index'] = -1
        net_cfg['skip_lm_AE'] = False

        decoder_ckpt_id = '0130_1'

        lm_ckpt_id = '0301_1'
        net_cfg['decoder_model_name'] = './model/ckpt/MODEL_{}_patchgan_lmconsis_one_decoder'.format(decoder_ckpt_id)

        net_cfg['decoder_cfg_path'] = osp.join(net_cfg['decoder_model_name'], '00_FSNet_onedecoder.yml')

        net_cfg['lm_AE_model_name'] = './model/ckpt/MODEL_{}_patchgan_lmconsis_lm_AE'.format(lm_ckpt_id)
        net_cfg['lm_AE_cfg_path'] = osp.join(net_cfg['lm_AE_model_name'], '00_FSNet_lm_AE.yml')
        net_cfg['decoder_ids'] = [0, 1, 2, 3, 4]
        net_cfg['lm_AE_ids'] = [0, 1, 2, 3, 4]

        net_cfg['model_type'] = ''
        net_cfg['decoder_num'] = len(net_cfg['decoder_ids'])

        net_cfg['lm_AE_num'] = len(net_cfg['lm_AE_ids'])

        net_cfg['map_de_id2AE_id'] = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8}

        with open(net_cfg['decoder_cfg_path'], 'rb') as f:
            decoder_cfg = edict(yaml.safe_load(f))
        with open(net_cfg['lm_AE_cfg_path'], 'rb') as f:
            lm_AE_cfg = edict(yaml.safe_load(f))

        self.net_cfg = net_cfg



def compute_nearest_index(all_pts, tar_pt):

    diff_array = all_pts - tar_pt
    nnorm = np.linalg.norm(diff_array, 2, 1)
    return np.argmin(nnorm, 0)

if __name__=='__main__':
    aa = TkWindow()
    aa.run_window()